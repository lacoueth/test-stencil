/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface AnnotationMark {
    /**
    * The content annotated
    */
    'annotated': string;
    /**
    * The content of the annotation
    */
    'annotation': string;
  }
  interface AnnotationMarkAttributes extends StencilHTMLAttributes {
    /**
    * The content annotated
    */
    'annotated'?: string;
    /**
    * The content of the annotation
    */
    'annotation'?: string;
    'onOnOpenAnnotation'?: (event: CustomEvent) => void;
  }

  interface ContentBox {
    /**
    * The content annotated
    */
    'classes': string;
    'heading': string;
  }
  interface ContentBoxAttributes extends StencilHTMLAttributes {
    /**
    * The content annotated
    */
    'classes'?: string;
    'heading'?: string;
  }

  interface DocumentPrinter {
    /**
    * The Markdown-Katex-HTML raw text input
    */
    'mdHtmlContent': string;
  }
  interface DocumentPrinterAttributes extends StencilHTMLAttributes {
    /**
    * The Markdown-Katex-HTML raw text input
    */
    'mdHtmlContent'?: string;
  }

  interface HideShow {
    /**
    * The content annotated
    */
    'classes': string;
    'heading': string;
    'isHidden': boolean;
  }
  interface HideShowAttributes extends StencilHTMLAttributes {
    /**
    * The content annotated
    */
    'classes'?: string;
    'heading'?: string;
    'isHidden'?: boolean;
  }

  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyComponentAttributes extends StencilHTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface SingleImage {
    'description': string;
    'title': string;
    /**
    * The content annotated
    */
    'url': string;
  }
  interface SingleImageAttributes extends StencilHTMLAttributes {
    'description'?: string;
    'title'?: string;
    /**
    * The content annotated
    */
    'url'?: string;
  }

  interface YoutubeVideo {
    /**
    * The video id
    */
    'id': string;
    'src': string;
  }
  interface YoutubeVideoAttributes extends StencilHTMLAttributes {
    /**
    * The video id
    */
    'id'?: string;
    'src'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AnnotationMark': Components.AnnotationMark;
    'ContentBox': Components.ContentBox;
    'DocumentPrinter': Components.DocumentPrinter;
    'HideShow': Components.HideShow;
    'MyComponent': Components.MyComponent;
    'SingleImage': Components.SingleImage;
    'YoutubeVideo': Components.YoutubeVideo;
  }

  interface StencilIntrinsicElements {
    'annotation-mark': Components.AnnotationMarkAttributes;
    'content-box': Components.ContentBoxAttributes;
    'document-printer': Components.DocumentPrinterAttributes;
    'hide-show': Components.HideShowAttributes;
    'my-component': Components.MyComponentAttributes;
    'single-image': Components.SingleImageAttributes;
    'youtube-video': Components.YoutubeVideoAttributes;
  }


  interface HTMLAnnotationMarkElement extends Components.AnnotationMark, HTMLStencilElement {}
  var HTMLAnnotationMarkElement: {
    prototype: HTMLAnnotationMarkElement;
    new (): HTMLAnnotationMarkElement;
  };

  interface HTMLContentBoxElement extends Components.ContentBox, HTMLStencilElement {}
  var HTMLContentBoxElement: {
    prototype: HTMLContentBoxElement;
    new (): HTMLContentBoxElement;
  };

  interface HTMLDocumentPrinterElement extends Components.DocumentPrinter, HTMLStencilElement {}
  var HTMLDocumentPrinterElement: {
    prototype: HTMLDocumentPrinterElement;
    new (): HTMLDocumentPrinterElement;
  };

  interface HTMLHideShowElement extends Components.HideShow, HTMLStencilElement {}
  var HTMLHideShowElement: {
    prototype: HTMLHideShowElement;
    new (): HTMLHideShowElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLSingleImageElement extends Components.SingleImage, HTMLStencilElement {}
  var HTMLSingleImageElement: {
    prototype: HTMLSingleImageElement;
    new (): HTMLSingleImageElement;
  };

  interface HTMLYoutubeVideoElement extends Components.YoutubeVideo, HTMLStencilElement {}
  var HTMLYoutubeVideoElement: {
    prototype: HTMLYoutubeVideoElement;
    new (): HTMLYoutubeVideoElement;
  };

  interface HTMLElementTagNameMap {
    'annotation-mark': HTMLAnnotationMarkElement
    'content-box': HTMLContentBoxElement
    'document-printer': HTMLDocumentPrinterElement
    'hide-show': HTMLHideShowElement
    'my-component': HTMLMyComponentElement
    'single-image': HTMLSingleImageElement
    'youtube-video': HTMLYoutubeVideoElement
  }

  interface ElementTagNameMap {
    'annotation-mark': HTMLAnnotationMarkElement;
    'content-box': HTMLContentBoxElement;
    'document-printer': HTMLDocumentPrinterElement;
    'hide-show': HTMLHideShowElement;
    'my-component': HTMLMyComponentElement;
    'single-image': HTMLSingleImageElement;
    'youtube-video': HTMLYoutubeVideoElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
